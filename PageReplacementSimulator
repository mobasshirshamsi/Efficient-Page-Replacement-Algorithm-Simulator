package Java;

import java.util.*;

public class PageReplacementSimulator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // User Input
        System.out.print("Enter the number of frames: ");
        int frames = scanner.nextInt();

        System.out.print("Enter the number of pages: ");
        int n = scanner.nextInt();

        int[] pages = new int[n];
        System.out.println("Enter the page reference string (space-separated values): ");
        for (int i = 0; i < n; i++) {
            pages[i] = scanner.nextInt();
        }

        System.out.println("Choose Page Replacement Algorithm:");
        System.out.println("1. FIFO (First-In-First-Out)");
        System.out.println("2. LRU (Least Recently Used)");
        System.out.println("3. Optimal");
        System.out.print("Enter choice (1-3): ");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                fifo(pages, frames);
                break;
            case 2:
                lru(pages, frames);
                break;
            case 3:
                optimal(pages, frames);
                break;
            default:
                System.out.println("Invalid choice. Exiting...");
        }
        scanner.close();
    }

    // FIFO Page Replacement Algorithm
    public static void fifo(int[] pages, int frames) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> set = new HashSet<>();
        int pageFaults = 0;

        for (int page : pages) {
            if (!set.contains(page)) {
                if (queue.size() == frames) {
                    int removed = queue.poll();
                    set.remove(removed);
                }
                queue.add(page);
                set.add(page);
                pageFaults++;
            }
            System.out.println("Frames: " + queue);
        }
        System.out.println("Total Page Faults (FIFO): " + pageFaults);
    }

    // LRU Page Replacement Algorithm
    public static void lru(int[] pages, int frames) {
        List<Integer> list = new LinkedList<>();
        int pageFaults = 0;

        for (int page : pages) {
            if (!list.contains(page)) {
                if (list.size() == frames) {
                    list.remove(0);
                }
                list.add(page);
                pageFaults++;
            } else {
                list.remove((Integer) page);
                list.add(page);
            }
            System.out.println("Frames: " + list);
        }
        System.out.println("Total Page Faults (LRU): " + pageFaults);
    }

    // Optimal Page Replacement Algorithm
    public static void optimal(int[] pages, int frames) {
        List<Integer> memory = new ArrayList<>();
        int pageFaults = 0;

        for (int i = 0; i < pages.length; i++) {
            if (!memory.contains(pages[i])) {
                if (memory.size() == frames) {
                    int farthest = -1, replaceIndex = -1;
                    for (int j = 0; j < memory.size(); j++) {
                        int nextIndex = findNextUse(pages, i, memory.get(j));
                        if (nextIndex == -1) {
                            replaceIndex = j;
                            break;
                        }
                        if (nextIndex > farthest) {
                            farthest = nextIndex;
                            replaceIndex = j;
                        }
                    }
                    memory.set(replaceIndex, pages[i]);
                } else {
                    memory.add(pages[i]);
                }
                pageFaults++;
            }
            System.out.println("Frames: " + memory);
        }
        System.out.println("Total Page Faults (Optimal): " + pageFaults);
    }

    // Helper function for Optimal Algorithm
    private static int findNextUse(int[] pages, int start, int page) {
        for (int i = start + 1; i < pages.length; i++) {
            if (pages[i] == page) return i;
        }
        return -1;
    }
}
